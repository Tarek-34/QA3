import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('quiz_bowl.db')
cursor = conn.cursor()

# Create separate tables for each new category
category_tables = {
    "Business Application Development": '''CREATE TABLE IF NOT EXISTS business_app_dev_questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_text TEXT,
        option_a TEXT,
        option_b TEXT,
        option_c TEXT,
        option_d TEXT,
        correct_answer TEXT
    )''',
    "Management Information Systems": '''CREATE TABLE IF NOT EXISTS mis_questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_text TEXT,
        option_a TEXT,
        option_b TEXT,
        option_c TEXT,
        option_d TEXT,
        correct_answer TEXT
    )''',
    "Principles of Marketing": '''CREATE TABLE IF NOT EXISTS marketing_questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_text TEXT,
        option_a TEXT,
        option_b TEXT,
        option_c TEXT,
        option_d TEXT,
        correct_answer TEXT
    )''',
    "Business Database Management": '''CREATE TABLE IF NOT EXISTS db_management_questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_text TEXT,
        option_a TEXT,
        option_b TEXT,
        option_c TEXT,
        option_d TEXT,
        correct_answer TEXT
    )''',
    "Business Data Communications": '''CREATE TABLE IF NOT EXISTS data_communications_questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_text TEXT,
        option_a TEXT,
        option_b TEXT,
        option_c TEXT,
        option_d TEXT,
        correct_answer TEXT
    )''',
}

# Create tables in the database
for table_creation_query in category_tables.values():
    cursor.execute(table_creation_query)
conn.commit()

# Define sample data for each category
sample_data = {
    "Business Application Development": [
        ("What is the main purpose of business application development?", "Data analysis", 
         "Software creation for business processes", "Customer service", "Marketing", "B"),
        ("Which language is commonly used for business web applications?", "JavaScript", "Python", 
         "COBOL", "Fortran", "A"),
        ("What is front-end development focused on?", "Database management", 
         "User interface and experience", "Server maintenance", "Networking", "B"),
        ("What is a common tool for back-end development?", "HTML", "CSS", "Node.js", "XML", "C"),
        ("What does SDLC stand for?", "System Development Life Cycle", 
         "Software Development Life Cycle", "System Design Logic Code", "Software Data Link Control", "B"),
    ],
    "Management Information Systems": [
        ("What is MIS primarily concerned with?", "Manufacturing", 
         "Information management and decision-making", "Programming", "Legal compliance", "B"),
        ("Which component is a part of an information system?", "People", "Products", 
         "Raw materials", "Vehicles", "A"),
        ("What is ERP?", "Efficient Resource Planning", "Enterprise Resource Planning", 
         "Extended Resource Platform", "Enhanced Research Program", "B"),
        ("Which of these is a core MIS function?", "Building websites", "Managing data", 
         "Customer feedback analysis", "Physical security", "B"),
        ("What does CRM stand for in business?", "Customer Retention Methodology", 
         "Customer Relationship Management", "Critical Response Model", "Customer Resource Manual", "B"),
    ],
    "Principles of Marketing": [
        ("What is the primary goal of marketing?", "Creating advertisements", 
         "Meeting customer needs profitably", "Developing products", "Managing supply chains", "B"),
        ("Which of these is one of the 4Ps of Marketing?", "Profit", "Price", 
         "People", "Productivity", "B"),
        ("What is market segmentation?", "Setting product prices", 
         "Dividing a market into groups", "Creating promotional materials", "Analyzing customer feedback", "B"),
        ("What is a target market?", "Any potential customer", "Specific group a company aims to reach", 
         "International customers", "Local customers only", "B"),
        ("What is the purpose of branding?", "Product design", "Differentiating a product", 
         "Cost reduction", "Increasing sales tax", "B"),
    ],
    "Business Database Management": [
        ("What is a database?", "A software for designing websites", 
         "A collection of organized data", "A programming language", "A network protocol", "B"),
        ("What is SQL?", "Standard Query Language", 
         "Structured Query Language", "Simple Query Layout", "Standard Queue Link", "B"),
        ("What is a primary key in a database?", "A field that uniquely identifies a record", 
         "A type of software", "An encryption method", "A programming function", "A"),
        ("What is the purpose of a relational database?", "Organize data in tables", 
         "Analyze network traffic", "Optimize web content", "Design application interfaces", "A"),
        ("Which command is used to retrieve data in SQL?", "UPDATE", 
         "DELETE", "SELECT", "INSERT", "C"),
    ],
    "Business Data Communications": [
        ("What is data communication?", "The process of printing data", 
         "Exchange of data between devices", "A programming language", "A type of database", "B"),
        ("What is bandwidth?", "The speed of a car", 
         "Amount of data transmitted over a network", "Strength of an internet signal", "Number of computers in a network", "B"),
        ("Which device is essential for networking?", "Keyboard", "Router", 
         "Mouse", "Scanner", "B"),
        ("What is Wi-Fi?", "A data management system", 
         "Wireless communication technology", "An internet service provider", "A programming language", "B"),
        ("What is the purpose of an IP address?", "To store user data", 
         "To identify devices on a network", "To provide internet speed", "To analyze data", "B"),
    ]
}
# Insert sample data into each category table if empty
for category, questions in sample_data.items():
    cursor.execute(f"SELECT COUNT(*) FROM {category.lower()}_questions")
    if cursor.fetchone()[0] == 0:
        for question in questions:
            cursor.execute(f'''
            INSERT INTO {category.lower()}_questions (question_text, option_a, option_b, option_c, option_d, correct_answer)
            VALUES (?, ?, ?, ?, ?, ?)
            ''', question)
        conn.commit()


# Define Question class
class Question:
    def __init__(self, question_text, options, correct_answer):
        self.question_text = question_text
        self.options = options
        self.correct_answer = correct_answer

    def check_answer(self, user_answer):
        return user_answer == self.correct_answer

# Main application class
class QuizApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Quiz Bowl")
        self.selected_category = tk.StringVar()
        self.questions = []
        self.current_question_index = 0
        self.score = 0
        self.user_answer = tk.StringVar()

        # Load first window for category selection
        self.create_category_selection_window()

    def create_category_selection_window(self):
        tk.Label(self.root, text="Select a Category").pack(pady=10)
        category_menu = ttk.Combobox(self.root, textvariable=self.selected_category, values=list(category_tables.keys()))
        category_menu.pack(pady=5)
        tk.Button(self.root, text="Start Quiz Now", command=self.start_quiz).pack(pady=20)

    def start_quiz(self):
        category = self.selected_category.get()
        if not category:
            messagebox.showwarning("Select Category", "Please select a category to start the quiz.")
            return

        # Fetch questions for the selected category
        self.fetch_questions(category)
        if not self.questions:
            messagebox.showerror("No Questions", "No questions available in this category.")
            return

        # Destroy category selection window and open quiz window
        for widget in self.root.winfo_children():
            widget.destroy()
        self.display_question()

    def fetch_questions(self, category):
        table_name = f"{category.lower().replace(' ', '_')}_questions"
        cursor.execute(f"SELECT question_text, option_a, option_b, option_c, option_d, correct_answer FROM {table_name}")
        questions_data = cursor.fetchall()
        self.questions = [
            Question(question_text=row[0], options=row[1:5], correct_answer=row[5]) for row in questions_data
        ]

    def display_question(self):
        if self.current_question_index >= len(self.questions):
            self.show_score()
            return

        question = self.questions[self.current_question_index]
        self.user_answer.set(None)

        # Display question and options
        tk.Label(self.root, text=question.question_text, font=("Arial", 14)).pack(pady=10)

        for i, option_text in enumerate(question.options):
            tk.Radiobutton(self.root, text=option_text, variable=self.user_answer, value=chr(65 + i)).pack(anchor='w')

        tk.Button(self.root, text="Submit Answer", command=self.submit_answer).pack(pady=20)

    def submit_answer(self):
        question = self.questions[self.current_question_index]
        user_answer = self.user_answer.get()

        if not user_answer:
            messagebox.showwarning("No Answer", "Please select an answer.")
            return

        # Check the answer
        if question.check_answer(user_answer):
            self.score += 1
            messagebox.showinfo("Correct!", "Your answer is correct!")
        else:
            messagebox.showinfo("Incorrect", f"The correct answer was: {question.correct_answer}")

        # Move to the next question
        self.current_question_index += 1

        # Clear window and show the next question
        for widget in self.root.winfo_children():
            widget.destroy()
        self.display_question()

    def show_score(self):
        messagebox.showinfo("Quiz Completed", f"Your score: {self.score} out of {len(self.questions)}")
        self.root.quit()

# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = QuizApp(root)
    root.mainloop()
